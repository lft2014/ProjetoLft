/* This file was generated by SableCC (http://www.sablecc.org/). */

package Portugol.parser;

import Portugol.lexer.*;
import Portugol.node.*;
import Portugol.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PAstPrograma node1 = (PAstPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce APrograma */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce ADclDeclaracoes */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce AVazioDeclaracoes */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AMultiplasDeclaracaoConj */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce ASimplesDeclaracaoConj */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce AConstDeclaracaoConj */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce AMultiplasDeclaracaoVarLista */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce ASimplesDeclaracaoVarLista */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AIdVarDef */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list);
            }
            break;
            case 9: /* reduce AVetorVarDef */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce AIntTipo */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list);
            }
            break;
            case 11: /* reduce ARealTipo */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list);
            }
            break;
            case 12: /* reduce ACTipo */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list);
            }
            break;
            case 13: /* reduce AIntValor */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list);
            }
            break;
            case 14: /* reduce ANrealValor */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list);
            }
            break;
            case 15: /* reduce AStrValor */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list);
            }
            break;
            case 16: /* reduce AExparitmeticaExpGeral */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list);
            }
            break;
            case 17: /* reduce AExpLExpGeral */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list);
            }
            break;
            case 18: /* reduce AMaisExp */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list);
            }
            break;
            case 19: /* reduce AMenosExp */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list);
            }
            break;
            case 20: /* reduce AExp */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list);
            }
            break;
            case 21: /* reduce AMultiplicacaoTermo */
            {
                ArrayList<Object> list = new21();
                push(goTo(9), list);
            }
            break;
            case 22: /* reduce ADivisaoTermo */
            {
                ArrayList<Object> list = new22();
                push(goTo(9), list);
            }
            break;
            case 23: /* reduce ATermo */
            {
                ArrayList<Object> list = new23();
                push(goTo(9), list);
            }
            break;
            case 24: /* reduce ANumerointFator */
            {
                ArrayList<Object> list = new24();
                push(goTo(10), list);
            }
            break;
            case 25: /* reduce AIdFator */
            {
                ArrayList<Object> list = new25();
                push(goTo(10), list);
            }
            break;
            case 26: /* reduce AExppFator */
            {
                ArrayList<Object> list = new26();
                push(goTo(10), list);
            }
            break;
            case 27: /* reduce AStrFator */
            {
                ArrayList<Object> list = new27();
                push(goTo(10), list);
            }
            break;
            case 28: /* reduce ANlogExpLogica */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list);
            }
            break;
            case 29: /* reduce AOubinExpLogica */
            {
                ArrayList<Object> list = new29();
                push(goTo(11), list);
            }
            break;
            case 30: /* reduce AOubinExplOu */
            {
                ArrayList<Object> list = new30();
                push(goTo(12), list);
            }
            break;
            case 31: /* reduce AXorbinExplOu */
            {
                ArrayList<Object> list = new31();
                push(goTo(12), list);
            }
            break;
            case 32: /* reduce ATermbinExplOu */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list);
            }
            break;
            case 33: /* reduce AEbinExpLogicaTermo */
            {
                ArrayList<Object> list = new33();
                push(goTo(13), list);
            }
            break;
            case 34: /* reduce AIgualdadeExpLogicaTermo */
            {
                ArrayList<Object> list = new34();
                push(goTo(13), list);
            }
            break;
            case 35: /* reduce AIgualExplIgualdade */
            {
                ArrayList<Object> list = new35();
                push(goTo(14), list);
            }
            break;
            case 36: /* reduce ADifExplIgualdade */
            {
                ArrayList<Object> list = new36();
                push(goTo(14), list);
            }
            break;
            case 37: /* reduce ARelacionalExplIgualdade */
            {
                ArrayList<Object> list = new37();
                push(goTo(14), list);
            }
            break;
            case 38: /* reduce AMenorIgualExpLogicaRelacional */
            {
                ArrayList<Object> list = new38();
                push(goTo(15), list);
            }
            break;
            case 39: /* reduce AMaiorIgualExpLogicaRelacional */
            {
                ArrayList<Object> list = new39();
                push(goTo(15), list);
            }
            break;
            case 40: /* reduce AMaiorExpLogicaRelacional */
            {
                ArrayList<Object> list = new40();
                push(goTo(15), list);
            }
            break;
            case 41: /* reduce AMenorExpLogicaRelacional */
            {
                ArrayList<Object> list = new41();
                push(goTo(15), list);
            }
            break;
            case 42: /* reduce AExpnlExpLogicaRelacional */
            {
                ArrayList<Object> list = new42();
                push(goTo(15), list);
            }
            break;
            case 43: /* reduce AExpParenExplParen */
            {
                ArrayList<Object> list = new43();
                push(goTo(16), list);
            }
            break;
            case 44: /* reduce ALeiaConjComandos */
            {
                ArrayList<Object> list = new44();
                push(goTo(17), list);
            }
            break;
            case 45: /* reduce AEscrevaConjComandos */
            {
                ArrayList<Object> list = new45();
                push(goTo(17), list);
            }
            break;
            case 46: /* reduce AAtribuicaoConjComandos */
            {
                ArrayList<Object> list = new46();
                push(goTo(17), list);
            }
            break;
            case 47: /* reduce ACondicionalConjComandos */
            {
                ArrayList<Object> list = new47();
                push(goTo(17), list);
            }
            break;
            case 48: /* reduce AEnquantoConjComandos */
            {
                ArrayList<Object> list = new48();
                push(goTo(17), list);
            }
            break;
            case 49: /* reduce ARepitaConjComandos */
            {
                ArrayList<Object> list = new49();
                push(goTo(17), list);
            }
            break;
            case 50: /* reduce AFacaConjComandos */
            {
                ArrayList<Object> list = new50();
                push(goTo(17), list);
            }
            break;
            case 51: /* reduce AFacaPassoConjComandos */
            {
                ArrayList<Object> list = new51();
                push(goTo(17), list);
            }
            break;
            case 52: /* reduce AAvalieConjComandos */
            {
                ArrayList<Object> list = new52();
                push(goTo(17), list);
            }
            break;
            case 53: /* reduce AVazioConjComandos */
            {
                ArrayList<Object> list = new53();
                push(goTo(17), list);
            }
            break;
            case 54: /* reduce ASimplesComandoLeia */
            {
                ArrayList<Object> list = new54();
                push(goTo(18), list);
            }
            break;
            case 55: /* reduce ACompostaComandoLeia */
            {
                ArrayList<Object> list = new55();
                push(goTo(18), list);
            }
            break;
            case 56: /* reduce ASimplesVarvirgula */
            {
                ArrayList<Object> list = new56();
                push(goTo(19), list);
            }
            break;
            case 57: /* reduce ACompostaVarvirgula */
            {
                ArrayList<Object> list = new57();
                push(goTo(19), list);
            }
            break;
            case 58: /* reduce ASimplesComandoEscreva */
            {
                ArrayList<Object> list = new58();
                push(goTo(20), list);
            }
            break;
            case 59: /* reduce ACompostaComandoEscreva */
            {
                ArrayList<Object> list = new59();
                push(goTo(20), list);
            }
            break;
            case 60: /* reduce ASimplesExpvirgula */
            {
                ArrayList<Object> list = new60();
                push(goTo(21), list);
            }
            break;
            case 61: /* reduce ACompostaExpvirgula */
            {
                ArrayList<Object> list = new61();
                push(goTo(21), list);
            }
            break;
            case 62: /* reduce AComandoAtribuicao */
            {
                ArrayList<Object> list = new62();
                push(goTo(22), list);
            }
            break;
            case 63: /* reduce ASimplesComandoSe */
            {
                ArrayList<Object> list = new63();
                push(goTo(23), list);
            }
            break;
            case 64: /* reduce ACompletoComandoSe */
            {
                ArrayList<Object> list = new64();
                push(goTo(23), list);
            }
            break;
            case 65: /* reduce ADSenao */
            {
                ArrayList<Object> list = new65();
                push(goTo(24), list);
            }
            break;
            case 66: /* reduce AEnquantoComandoEnquanto */
            {
                ArrayList<Object> list = new66();
                push(goTo(25), list);
            }
            break;
            case 67: /* reduce ARepitaComandoRepita */
            {
                ArrayList<Object> list = new67();
                push(goTo(26), list);
            }
            break;
            case 68: /* reduce AParaComandoPara */
            {
                ArrayList<Object> list = new68();
                push(goTo(27), list);
            }
            break;
            case 69: /* reduce AComplementoPara */
            {
                ArrayList<Object> list = new69();
                push(goTo(28), list);
            }
            break;
            case 70: /* reduce AComandoParaPasso */
            {
                ArrayList<Object> list = new70();
                push(goTo(29), list);
            }
            break;
            case 71: /* reduce AComplementoPara2 */
            {
                ArrayList<Object> list = new71();
                push(goTo(30), list);
            }
            break;
            case 72: /* reduce AComandoAvalie */
            {
                ArrayList<Object> list = new72();
                push(goTo(31), list);
            }
            break;
            case 73: /* reduce AComandoCaso */
            {
                ArrayList<Object> list = new73();
                push(goTo(32), list);
            }
            break;
            case 74: /* reduce ASenaoSenaoAvalie */
            {
                ArrayList<Object> list = new74();
                push(goTo(33), list);
            }
            break;
            case 75: /* reduce AVazioSenaoAvalie */
            {
                ArrayList<Object> list = new75();
                push(goTo(33), list);
            }
            break;
            case 76: /* reduce ATerminal$ComandoCaso */
            {
                ArrayList<Object> list = new76();
                push(goTo(34), list);
            }
            break;
            case 77: /* reduce ANonTerminal$ComandoCaso */
            {
                ArrayList<Object> list = new77();
                push(goTo(34), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce APrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstPrograma pastprogramaNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidentificadorNode2 = (TIdentificador)nodeArrayList2.get(0);
        {
            // Block
        PAstDeclaracoes pastdeclaracoesNode3;
        pastdeclaracoesNode3 = (PAstDeclaracoes)nodeArrayList4.get(0);
	if(pastdeclaracoesNode3 != null)
	{
	  listNode4.add(pastdeclaracoesNode3);
	}
        }
        {
            // Block
        PConjComandos pconjcomandosNode5;
        pconjcomandosNode5 = (PConjComandos)nodeArrayList5.get(0);
	if(pconjcomandosNode5 != null)
	{
	  listNode6.add(pconjcomandosNode5);
	}
        }

        pastprogramaNode1 = new AAstPrograma(tidentificadorNode2, listNode4, listNode6);
        }
	nodeList.add(pastprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ADclDeclaracoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstDeclaracoes pastdeclaracoesNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PAstDeclconj pastdeclconjNode2;
        pastdeclconjNode2 = (PAstDeclconj)nodeArrayList2.get(0);
	if(pastdeclconjNode2 != null)
	{
	  listNode3.add(pastdeclconjNode2);
	}
        }

        pastdeclaracoesNode1 = new ADclAstDeclaracoes(listNode3);
        }
	nodeList.add(pastdeclaracoesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AVazioDeclaracoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PAstDeclaracoes pastdeclaracoesNode1;
        {
            // Block

        pastdeclaracoesNode1 = new AVazioAstDeclaracoes();
        }
	nodeList.add(pastdeclaracoesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AMultiplasDeclaracaoConj */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstDeclconj pastdeclconjNode1;
        {
            // Block
        PAstTipo pasttipoNode2;
        PAstDclVarLista pastdclvarlistaNode3;
        PAstVarDef pastvardefNode4;
        pasttipoNode2 = (PAstTipo)nodeArrayList1.get(0);
        pastdclvarlistaNode3 = (PAstDclVarLista)nodeArrayList3.get(0);
        pastvardefNode4 = (PAstVarDef)nodeArrayList4.get(0);

        pastdeclconjNode1 = new AMultiplasAstDeclconj(pasttipoNode2, pastdclvarlistaNode3, pastvardefNode4);
        }
	nodeList.add(pastdeclconjNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ASimplesDeclaracaoConj */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstDeclconj pastdeclconjNode1;
        {
            // Block
        PAstTipo pasttipoNode2;
        PAstVarDef pastvardefNode3;
        pasttipoNode2 = (PAstTipo)nodeArrayList1.get(0);
        pastvardefNode3 = (PAstVarDef)nodeArrayList3.get(0);

        pastdeclconjNode1 = new ASimplesAstDeclconj(pasttipoNode2, pastvardefNode3);
        }
	nodeList.add(pastdeclconjNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AConstDeclaracaoConj */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstDeclconj pastdeclconjNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        PAstValor pastvalorNode3;
        tidentificadorNode2 = (TIdentificador)nodeArrayList2.get(0);
        pastvalorNode3 = (PAstValor)nodeArrayList3.get(0);

        pastdeclconjNode1 = new AConstAstDeclconj(tidentificadorNode2, pastvalorNode3);
        }
	nodeList.add(pastdeclconjNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AMultiplasDeclaracaoVarLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstDclVarLista pastdclvarlistaNode1;
        {
            // Block
        PAstDclVarLista pastdclvarlistaNode2;
        PAstVarDef pastvardefNode3;
        pastdclvarlistaNode2 = (PAstDclVarLista)nodeArrayList1.get(0);
        pastvardefNode3 = (PAstVarDef)nodeArrayList2.get(0);

        pastdclvarlistaNode1 = new AMultiplasAstDclVarLista(pastdclvarlistaNode2, pastvardefNode3);
        }
	nodeList.add(pastdclvarlistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ASimplesDeclaracaoVarLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstDclVarLista pastdclvarlistaNode1;
        {
            // Block
        PAstVarDef pastvardefNode2;
        pastvardefNode2 = (PAstVarDef)nodeArrayList1.get(0);

        pastdclvarlistaNode1 = new ASimplesAstDclVarLista(pastvardefNode2);
        }
	nodeList.add(pastdclvarlistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AIdVarDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstVarDef pastvardefNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);

        pastvardefNode1 = new AIdAstVarDef(tidentificadorNode2);
        }
	nodeList.add(pastvardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVetorVarDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstVarDef pastvardefNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        TEsqColchete tesqcolcheteNode3;
        TNInt tnintNode4;
        TDirColchete tdircolcheteNode5;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);
        tesqcolcheteNode3 = (TEsqColchete)nodeArrayList2.get(0);
        tnintNode4 = (TNInt)nodeArrayList3.get(0);
        tdircolcheteNode5 = (TDirColchete)nodeArrayList4.get(0);

        pastvardefNode1 = new AVetorAstVarDef(tidentificadorNode2, tesqcolcheteNode3, tnintNode4, tdircolcheteNode5);
        }
	nodeList.add(pastvardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AIntTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstTipo pasttipoNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        pasttipoNode1 = new AIntAstTipo(tinteiroNode2);
        }
	nodeList.add(pasttipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ARealTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstTipo pasttipoNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        pasttipoNode1 = new ARealAstTipo(trealNode2);
        }
	nodeList.add(pasttipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ACTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstTipo pasttipoNode1;
        {
            // Block
        TCaractere tcaractereNode2;
        tcaractereNode2 = (TCaractere)nodeArrayList1.get(0);

        pasttipoNode1 = new ACAstTipo(tcaractereNode2);
        }
	nodeList.add(pasttipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AIntValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstValor pastvalorNode1;
        {
            // Block
        TNInt tnintNode2;
        tnintNode2 = (TNInt)nodeArrayList1.get(0);

        pastvalorNode1 = new AIntAstValor(tnintNode2);
        }
	nodeList.add(pastvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ANrealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstValor pastvalorNode1;
        {
            // Block
        TNReal tnrealNode2;
        tnrealNode2 = (TNReal)nodeArrayList1.get(0);

        pastvalorNode1 = new ANrealAstValor(tnrealNode2);
        }
	nodeList.add(pastvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AStrValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstValor pastvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pastvalorNode1 = new AStrAstValor(tstringNode2);
        }
	nodeList.add(pastvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AExparitmeticaExpGeral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpGeral pexpgeralNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pexpgeralNode1 = new AExparitmeticaExpGeral(pexpNode2);
        }
	nodeList.add(pexpgeralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AExpLExpGeral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpGeral pexpgeralNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);

        pexpgeralNode1 = new AExpLExpGeral(pexplogicaNode2);
        }
	nodeList.add(pexpgeralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AMaisExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMaisExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AMenosExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMenosExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AMultiplicacaoTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMultiplicacaoExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ADivisaoTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivisaoExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ATermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ANumerointFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNInt tnintNode2;
        tnintNode2 = (TNInt)nodeArrayList1.get(0);

        pexpNode1 = new ANumerointExp(tnintNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AIdFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);

        pexpNode1 = new AIdExp(tidentificadorNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AExppFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AStrFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pexpNode1 = new AStrExp(tstringNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ANlogExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        TNao tnaoNode2;
        PExpLogica pexplogicaNode3;
        tnaoNode2 = (TNao)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList2.get(0);

        pexplogicaNode1 = new ANlogExpLogica(tnaoNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AOubinExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AOubinExplOu */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AOubinExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AXorbinExplOu */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AXorbinExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ATermbinExplOu */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AEbinExpLogicaTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AEbinExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AIgualdadeExpLogicaTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AIgualExplIgualdade */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AIgualExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ADifExplIgualdade */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new ADiferenteExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ARelacionalExplIgualdade */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AMenorIgualExpLogicaRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AMenorIgualExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AMaiorIgualExpLogicaRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AMaiorIgualExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AMaiorExpLogicaRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AMaiorExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AMenorExpLogicaRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AMenorExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AExpnlExpLogicaRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AExpParenExplParen */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList2.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ALeiaConjComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConjComandos pconjcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PAstLeia pastleiaNode4;
        {
            // Block
        PConjComandos pconjcomandosNode2;
        pconjcomandosNode2 = (PConjComandos)nodeArrayList1.get(0);
	if(pconjcomandosNode2 != null)
	{
	  listNode3.add(pconjcomandosNode2);
	}
        }
        pastleiaNode4 = (PAstLeia)nodeArrayList2.get(0);

        pconjcomandosNode1 = new ALeiaConjComandos(listNode3, pastleiaNode4);
        }
	nodeList.add(pconjcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AEscrevaConjComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConjComandos pconjcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PAstEscreva pastescrevaNode4;
        {
            // Block
        PConjComandos pconjcomandosNode2;
        pconjcomandosNode2 = (PConjComandos)nodeArrayList1.get(0);
	if(pconjcomandosNode2 != null)
	{
	  listNode3.add(pconjcomandosNode2);
	}
        }
        pastescrevaNode4 = (PAstEscreva)nodeArrayList2.get(0);

        pconjcomandosNode1 = new AEscrevaConjComandos(listNode3, pastescrevaNode4);
        }
	nodeList.add(pconjcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAtribuicaoConjComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConjComandos pconjcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PAstAtribuicao pastatribuicaoNode4;
        {
            // Block
        PConjComandos pconjcomandosNode2;
        pconjcomandosNode2 = (PConjComandos)nodeArrayList1.get(0);
	if(pconjcomandosNode2 != null)
	{
	  listNode3.add(pconjcomandosNode2);
	}
        }
        pastatribuicaoNode4 = (PAstAtribuicao)nodeArrayList2.get(0);

        pconjcomandosNode1 = new AAtribuicaoConjComandos(listNode3, pastatribuicaoNode4);
        }
	nodeList.add(pconjcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ACondicionalConjComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConjComandos pconjcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PAstComandoSe pastcomandoseNode4;
        {
            // Block
        PConjComandos pconjcomandosNode2;
        pconjcomandosNode2 = (PConjComandos)nodeArrayList1.get(0);
	if(pconjcomandosNode2 != null)
	{
	  listNode3.add(pconjcomandosNode2);
	}
        }
        pastcomandoseNode4 = (PAstComandoSe)nodeArrayList2.get(0);

        pconjcomandosNode1 = new ACondicionalConjComandos(listNode3, pastcomandoseNode4);
        }
	nodeList.add(pconjcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AEnquantoConjComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConjComandos pconjcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PAstComandoEnquanto pastcomandoenquantoNode4;
        {
            // Block
        PConjComandos pconjcomandosNode2;
        pconjcomandosNode2 = (PConjComandos)nodeArrayList1.get(0);
	if(pconjcomandosNode2 != null)
	{
	  listNode3.add(pconjcomandosNode2);
	}
        }
        pastcomandoenquantoNode4 = (PAstComandoEnquanto)nodeArrayList2.get(0);

        pconjcomandosNode1 = new AEnquantoConjComandos(listNode3, pastcomandoenquantoNode4);
        }
	nodeList.add(pconjcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ARepitaConjComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConjComandos pconjcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PAstComandoRepita pastcomandorepitaNode4;
        {
            // Block
        PConjComandos pconjcomandosNode2;
        pconjcomandosNode2 = (PConjComandos)nodeArrayList1.get(0);
	if(pconjcomandosNode2 != null)
	{
	  listNode3.add(pconjcomandosNode2);
	}
        }
        pastcomandorepitaNode4 = (PAstComandoRepita)nodeArrayList2.get(0);

        pconjcomandosNode1 = new ARepitaConjComandos(listNode3, pastcomandorepitaNode4);
        }
	nodeList.add(pconjcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AFacaConjComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConjComandos pconjcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PAstComandoPara pastcomandoparaNode4;
        {
            // Block
        PConjComandos pconjcomandosNode2;
        pconjcomandosNode2 = (PConjComandos)nodeArrayList1.get(0);
	if(pconjcomandosNode2 != null)
	{
	  listNode3.add(pconjcomandosNode2);
	}
        }
        pastcomandoparaNode4 = (PAstComandoPara)nodeArrayList2.get(0);

        pconjcomandosNode1 = new AFacaConjComandos(listNode3, pastcomandoparaNode4);
        }
	nodeList.add(pconjcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AFacaPassoConjComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConjComandos pconjcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PAstParaPasso pastparapassoNode4;
        {
            // Block
        PConjComandos pconjcomandosNode2;
        pconjcomandosNode2 = (PConjComandos)nodeArrayList1.get(0);
	if(pconjcomandosNode2 != null)
	{
	  listNode3.add(pconjcomandosNode2);
	}
        }
        pastparapassoNode4 = (PAstParaPasso)nodeArrayList2.get(0);

        pconjcomandosNode1 = new AFacaPassoConjComandos(listNode3, pastparapassoNode4);
        }
	nodeList.add(pconjcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAvalieConjComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConjComandos pconjcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PAstAvalie pastavalieNode4;
        {
            // Block
        PConjComandos pconjcomandosNode2;
        pconjcomandosNode2 = (PConjComandos)nodeArrayList1.get(0);
	if(pconjcomandosNode2 != null)
	{
	  listNode3.add(pconjcomandosNode2);
	}
        }
        pastavalieNode4 = (PAstAvalie)nodeArrayList2.get(0);

        pconjcomandosNode1 = new AAvalieConjComandos(listNode3, pastavalieNode4);
        }
	nodeList.add(pconjcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AVazioConjComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PConjComandos pconjcomandosNode1;
        {
            // Block

        pconjcomandosNode1 = new AVazioConjComandos();
        }
	nodeList.add(pconjcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ASimplesComandoLeia */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstLeia pastleiaNode1;
        {
            // Block
        PAstVarDef pastvardefNode2;
        pastvardefNode2 = (PAstVarDef)nodeArrayList3.get(0);

        pastleiaNode1 = new ASimplesAstLeia(pastvardefNode2);
        }
	nodeList.add(pastleiaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ACompostaComandoLeia */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstLeia pastleiaNode1;
        {
            // Block
        PAstVarvirgula pastvarvirgulaNode2;
        pastvarvirgulaNode2 = (PAstVarvirgula)nodeArrayList3.get(0);

        pastleiaNode1 = new ACompostaAstLeia(pastvarvirgulaNode2);
        }
	nodeList.add(pastleiaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ASimplesVarvirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstVarvirgula pastvarvirgulaNode1;
        {
            // Block
        PAstVarDef pastvardefNode2;
        TVirgula tvirgulaNode3;
        pastvardefNode2 = (PAstVarDef)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);

        pastvarvirgulaNode1 = new ASimplesAstVarvirgula(pastvardefNode2, tvirgulaNode3);
        }
	nodeList.add(pastvarvirgulaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ACompostaVarvirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstVarvirgula pastvarvirgulaNode1;
        {
            // Block
        PAstVarDef pastvardefNode2;
        TVirgula tvirgulaNode3;
        PAstVarvirgula pastvarvirgulaNode4;
        pastvardefNode2 = (PAstVarDef)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);
        pastvarvirgulaNode4 = (PAstVarvirgula)nodeArrayList3.get(0);

        pastvarvirgulaNode1 = new ACompostaAstVarvirgula(pastvardefNode2, tvirgulaNode3, pastvarvirgulaNode4);
        }
	nodeList.add(pastvarvirgulaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ASimplesComandoEscreva */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstEscreva pastescrevaNode1;
        {
            // Block
        PExpGeral pexpgeralNode2;
        pexpgeralNode2 = (PExpGeral)nodeArrayList3.get(0);

        pastescrevaNode1 = new ASimplesAstEscreva(pexpgeralNode2);
        }
	nodeList.add(pastescrevaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ACompostaComandoEscreva */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstEscreva pastescrevaNode1;
        {
            // Block
        PAstExpvirgula pastexpvirgulaNode2;
        pastexpvirgulaNode2 = (PAstExpvirgula)nodeArrayList3.get(0);

        pastescrevaNode1 = new ACompostaAstEscreva(pastexpvirgulaNode2);
        }
	nodeList.add(pastescrevaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ASimplesExpvirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstExpvirgula pastexpvirgulaNode1;
        {
            // Block
        PExpGeral pexpgeralNode2;
        TVirgula tvirgulaNode3;
        pexpgeralNode2 = (PExpGeral)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);

        pastexpvirgulaNode1 = new ASimplesAstExpvirgula(pexpgeralNode2, tvirgulaNode3);
        }
	nodeList.add(pastexpvirgulaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ACompostaExpvirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstExpvirgula pastexpvirgulaNode1;
        {
            // Block
        PExpGeral pexpgeralNode2;
        TVirgula tvirgulaNode3;
        PAstExpvirgula pastexpvirgulaNode4;
        pexpgeralNode2 = (PExpGeral)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);
        pastexpvirgulaNode4 = (PAstExpvirgula)nodeArrayList3.get(0);

        pastexpvirgulaNode1 = new ACompostaAstExpvirgula(pexpgeralNode2, tvirgulaNode3, pastexpvirgulaNode4);
        }
	nodeList.add(pastexpvirgulaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AComandoAtribuicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstAtribuicao pastatribuicaoNode1;
        {
            // Block
        PAstVarDef pastvardefNode2;
        PExpGeral pexpgeralNode3;
        pastvardefNode2 = (PAstVarDef)nodeArrayList1.get(0);
        pexpgeralNode3 = (PExpGeral)nodeArrayList3.get(0);

        pastatribuicaoNode1 = new AAstAtribuicao(pastvardefNode2, pexpgeralNode3);
        }
	nodeList.add(pastatribuicaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ASimplesComandoSe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstComandoSe pastcomandoseNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        {
            // Block
        PConjComandos pconjcomandosNode3;
        pconjcomandosNode3 = (PConjComandos)nodeArrayList6.get(0);
	if(pconjcomandosNode3 != null)
	{
	  listNode4.add(pconjcomandosNode3);
	}
        }

        pastcomandoseNode1 = new ASimplesAstComandoSe(pexplogicaNode2, listNode4);
        }
	nodeList.add(pastcomandoseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ACompletoComandoSe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstComandoSe pastcomandoseNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        {
            // Block
        PConjComandos pconjcomandosNode3;
        pconjcomandosNode3 = (PConjComandos)nodeArrayList6.get(0);
	if(pconjcomandosNode3 != null)
	{
	  listNode4.add(pconjcomandosNode3);
	}
        }

        pastcomandoseNode1 = new ACompletoAstComandoSe(pexplogicaNode2, listNode4);
        }
	nodeList.add(pastcomandoseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ADSenao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AEnquantoComandoEnquanto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstComandoEnquanto pastcomandoenquantoNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        {
            // Block
        PConjComandos pconjcomandosNode3;
        pconjcomandosNode3 = (PConjComandos)nodeArrayList6.get(0);
	if(pconjcomandosNode3 != null)
	{
	  listNode4.add(pconjcomandosNode3);
	}
        }

        pastcomandoenquantoNode1 = new AEnquantoAstComandoEnquanto(pexplogicaNode2, listNode4);
        }
	nodeList.add(pastcomandoenquantoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ARepitaComandoRepita */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstComandoRepita pastcomandorepitaNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExpLogica pexplogicaNode4;
        {
            // Block
        PConjComandos pconjcomandosNode2;
        pconjcomandosNode2 = (PConjComandos)nodeArrayList2.get(0);
	if(pconjcomandosNode2 != null)
	{
	  listNode3.add(pconjcomandosNode2);
	}
        }
        pexplogicaNode4 = (PExpLogica)nodeArrayList5.get(0);

        pastcomandorepitaNode1 = new ARepitaAstComandoRepita(listNode3, pexplogicaNode4);
        }
	nodeList.add(pastcomandorepitaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AParaComandoPara */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstComandoPara pastcomandoparaNode1;
        {
            // Block
        PAstVarDef pastvardefNode2;
        TNInt tnintNode3;
        PAstComplemento1 pastcomplemento1Node4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pastvardefNode2 = (PAstVarDef)nodeArrayList2.get(0);
        tnintNode3 = (TNInt)nodeArrayList4.get(0);
        pastcomplemento1Node4 = (PAstComplemento1)nodeArrayList6.get(0);
        {
            // Block
        PConjComandos pconjcomandosNode5;
        pconjcomandosNode5 = (PConjComandos)nodeArrayList8.get(0);
	if(pconjcomandosNode5 != null)
	{
	  listNode6.add(pconjcomandosNode5);
	}
        }

        pastcomandoparaNode1 = new AParaAstComandoPara(pastvardefNode2, tnintNode3, pastcomplemento1Node4, listNode6);
        }
	nodeList.add(pastcomandoparaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AComplementoPara */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstComplemento1 pastcomplemento1Node1;
        {
            // Block
        TNInt tnintNode2;
        tnintNode2 = (TNInt)nodeArrayList1.get(0);

        pastcomplemento1Node1 = new AAstComplemento1(tnintNode2);
        }
	nodeList.add(pastcomplemento1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AComandoParaPasso */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstParaPasso pastparapassoNode1;
        {
            // Block
        PAstVarDef pastvardefNode2;
        TNInt tnintNode3;
        PAstComplemento2 pastcomplemento2Node4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pastvardefNode2 = (PAstVarDef)nodeArrayList2.get(0);
        tnintNode3 = (TNInt)nodeArrayList4.get(0);
        pastcomplemento2Node4 = (PAstComplemento2)nodeArrayList6.get(0);
        {
            // Block
        PConjComandos pconjcomandosNode5;
        pconjcomandosNode5 = (PConjComandos)nodeArrayList10.get(0);
	if(pconjcomandosNode5 != null)
	{
	  listNode6.add(pconjcomandosNode5);
	}
        }

        pastparapassoNode1 = new AAstParaPasso(pastvardefNode2, tnintNode3, pastcomplemento2Node4, listNode6);
        }
	nodeList.add(pastparapassoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AComplementoPara2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstComplemento2 pastcomplemento2Node1;
        {
            // Block
        TNInt tnintNode2;
        tnintNode2 = (TNInt)nodeArrayList1.get(0);

        pastcomplemento2Node1 = new AAstComplemento2(tnintNode2);
        }
	nodeList.add(pastcomplemento2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AComandoAvalie */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstAvalie pastavalieNode1;
        {
            // Block
        PExpGeral pexpgeralNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PAstSenaoAvalie pastsenaoavalieNode5;
        pexpgeralNode2 = (PExpGeral)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pastsenaoavalieNode5 = (PAstSenaoAvalie)nodeArrayList6.get(0);

        pastavalieNode1 = new AAstAvalie(pexpgeralNode2, listNode4, pastsenaoavalieNode5);
        }
	nodeList.add(pastavalieNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AComandoCaso */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstCaso pastcasoNode1;
        {
            // Block
        PAstValor pastvalorNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pastvalorNode2 = (PAstValor)nodeArrayList2.get(0);
        {
            // Block
        PConjComandos pconjcomandosNode3;
        pconjcomandosNode3 = (PConjComandos)nodeArrayList4.get(0);
	if(pconjcomandosNode3 != null)
	{
	  listNode4.add(pconjcomandosNode3);
	}
        }

        pastcasoNode1 = new AAstCaso(pastvalorNode2, listNode4);
        }
	nodeList.add(pastcasoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ASenaoSenaoAvalie */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAstSenaoAvalie pastsenaoavalieNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PConjComandos pconjcomandosNode2;
        pconjcomandosNode2 = (PConjComandos)nodeArrayList3.get(0);
	if(pconjcomandosNode2 != null)
	{
	  listNode3.add(pconjcomandosNode2);
	}
        }

        pastsenaoavalieNode1 = new ASenaoAstSenaoAvalie(listNode3);
        }
	nodeList.add(pastsenaoavalieNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AVazioSenaoAvalie */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PAstSenaoAvalie pastsenaoavalieNode1;
        {
            // Block

        pastsenaoavalieNode1 = new AVazioAstSenaoAvalie();
        }
	nodeList.add(pastsenaoavalieNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ATerminal$ComandoCaso */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAstCaso pastcasoNode1;
        pastcasoNode1 = (PAstCaso)nodeArrayList1.get(0);
	if(pastcasoNode1 != null)
	{
	  listNode2.add(pastcasoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ANonTerminal$ComandoCaso */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAstCaso pastcasoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pastcasoNode2 = (PAstCaso)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pastcasoNode2 != null)
	{
	  listNode3.add(pastcasoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {3, SHIFT, 1}, },
			{{-1, ERROR, 1}, {53, SHIFT, 3}, },
			{{-1, ERROR, 2}, {60, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {2, SHIFT, 4}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 53}, {6, SHIFT, 6}, {7, SHIFT, 7}, {8, SHIFT, 8}, {9, SHIFT, 9}, },
			{{-1, ERROR, 6}, {53, SHIFT, 13}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 11}, {35, SHIFT, 14}, },
			{{-1, ERROR, 12}, {0, SHIFT, 15}, {4, SHIFT, 16}, {5, SHIFT, 17}, {13, SHIFT, 18}, {17, SHIFT, 19}, {20, SHIFT, 20}, {23, SHIFT, 21}, {25, SHIFT, 22}, {53, SHIFT, 23}, },
			{{-1, ERROR, 13}, {10, SHIFT, 34}, {11, SHIFT, 35}, {12, SHIFT, 36}, },
			{{-1, ERROR, 14}, {53, SHIFT, 23}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 16}, {37, SHIFT, 40}, },
			{{-1, ERROR, 17}, {37, SHIFT, 41}, },
			{{-1, ERROR, 18}, {37, SHIFT, 42}, },
			{{-1, ERROR, 19}, {37, SHIFT, 43}, },
			{{-1, ERROR, 20}, {37, SHIFT, 44}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 22}, {53, SHIFT, 23}, },
			{{-1, REDUCE, 8}, {41, SHIFT, 47}, },
			{{-1, ERROR, 24}, {33, SHIFT, 48}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 37}, {36, SHIFT, 49}, },
			{{-1, ERROR, 38}, {53, SHIFT, 23}, },
			{{-1, ERROR, 39}, {34, SHIFT, 51}, {36, SHIFT, 52}, },
			{{-1, ERROR, 40}, {53, SHIFT, 23}, },
			{{-1, ERROR, 41}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 57}, {52, SHIFT, 58}, {53, SHIFT, 59}, },
			{{-1, ERROR, 42}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 57}, {52, SHIFT, 58}, {53, SHIFT, 59}, },
			{{-1, ERROR, 43}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 57}, {52, SHIFT, 58}, {53, SHIFT, 59}, },
			{{-1, ERROR, 44}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 57}, {52, SHIFT, 58}, {53, SHIFT, 59}, },
			{{-1, ERROR, 45}, {4, SHIFT, 16}, {5, SHIFT, 17}, {13, SHIFT, 18}, {17, SHIFT, 19}, {20, SHIFT, 20}, {23, SHIFT, 21}, {24, SHIFT, 75}, {25, SHIFT, 22}, {53, SHIFT, 23}, },
			{{-1, ERROR, 46}, {27, SHIFT, 76}, },
			{{-1, ERROR, 47}, {11, SHIFT, 77}, },
			{{-1, ERROR, 48}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 57}, {52, SHIFT, 58}, {53, SHIFT, 59}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 50}, {34, SHIFT, 79}, {36, SHIFT, 80}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 53}, {34, SHIFT, 81}, {38, SHIFT, 82}, },
			{{-1, ERROR, 54}, {38, SHIFT, 83}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 57}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 57}, {52, SHIFT, 58}, {53, SHIFT, 59}, },
			{{-1, ERROR, 58}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 57}, {52, SHIFT, 58}, {53, SHIFT, 59}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 60}, {34, SHIFT, 87}, {38, SHIFT, 88}, },
			{{-1, REDUCE, 16}, {29, SHIFT, 89}, {30, SHIFT, 90}, {43, SHIFT, 91}, {44, SHIFT, 92}, {45, SHIFT, 93}, {46, SHIFT, 94}, {47, SHIFT, 95}, {48, SHIFT, 96}, },
			{{-1, REDUCE, 20}, {31, SHIFT, 97}, {32, SHIFT, 98}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 29}, {50, SHIFT, 99}, {51, SHIFT, 100}, },
			{{-1, REDUCE, 32}, {49, SHIFT, 101}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 70}, {38, SHIFT, 102}, },
			{{-1, ERROR, 71}, {29, SHIFT, 89}, {30, SHIFT, 90}, {43, SHIFT, 91}, {44, SHIFT, 92}, {45, SHIFT, 93}, {46, SHIFT, 94}, {47, SHIFT, 95}, {48, SHIFT, 96}, },
			{{-1, ERROR, 72}, {38, SHIFT, 103}, },
			{{-1, ERROR, 73}, {38, SHIFT, 104}, },
			{{-1, ERROR, 74}, {38, SHIFT, 105}, },
			{{-1, ERROR, 75}, {37, SHIFT, 106}, },
			{{-1, ERROR, 76}, {11, SHIFT, 107}, },
			{{-1, ERROR, 77}, {42, SHIFT, 108}, },
			{{-1, ERROR, 78}, {36, SHIFT, 109}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 56}, {53, SHIFT, 23}, },
			{{-1, ERROR, 82}, {36, SHIFT, 112}, },
			{{-1, ERROR, 83}, {36, SHIFT, 113}, },
			{{-1, ERROR, 84}, {29, SHIFT, 89}, {30, SHIFT, 90}, {38, SHIFT, 114}, {43, SHIFT, 91}, {44, SHIFT, 92}, {45, SHIFT, 93}, {46, SHIFT, 94}, {47, SHIFT, 95}, {48, SHIFT, 96}, },
			{{-1, ERROR, 85}, {38, SHIFT, 115}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 60}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 57}, {52, SHIFT, 58}, {53, SHIFT, 59}, },
			{{-1, ERROR, 88}, {36, SHIFT, 118}, },
			{{-1, ERROR, 89}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 119}, {53, SHIFT, 59}, },
			{{-1, ERROR, 90}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 119}, {53, SHIFT, 59}, },
			{{-1, ERROR, 91}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 119}, {53, SHIFT, 59}, },
			{{-1, ERROR, 92}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 119}, {53, SHIFT, 59}, },
			{{-1, ERROR, 93}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 119}, {53, SHIFT, 59}, },
			{{-1, ERROR, 94}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 119}, {53, SHIFT, 59}, },
			{{-1, ERROR, 95}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 119}, {53, SHIFT, 59}, },
			{{-1, ERROR, 96}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 119}, {53, SHIFT, 59}, },
			{{-1, ERROR, 97}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 119}, {53, SHIFT, 59}, },
			{{-1, ERROR, 98}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 119}, {53, SHIFT, 59}, },
			{{-1, ERROR, 99}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 57}, {53, SHIFT, 59}, },
			{{-1, ERROR, 100}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 57}, {53, SHIFT, 59}, },
			{{-1, ERROR, 101}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 57}, {53, SHIFT, 59}, },
			{{-1, ERROR, 102}, {36, SHIFT, 133}, },
			{{-1, ERROR, 103}, {15, SHIFT, 134}, },
			{{-1, ERROR, 104}, {19, SHIFT, 135}, },
			{{-1, ERROR, 105}, {21, SHIFT, 138}, },
			{{-1, ERROR, 106}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 57}, {52, SHIFT, 58}, {53, SHIFT, 59}, },
			{{-1, ERROR, 107}, {24, SHIFT, 140}, {28, SHIFT, 141}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 110}, {34, SHIFT, 81}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 116}, {34, SHIFT, 87}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 119}, {10, SHIFT, 55}, {11, SHIFT, 56}, {37, SHIFT, 119}, {53, SHIFT, 59}, },
			{{-1, REDUCE, 18}, {31, SHIFT, 97}, {32, SHIFT, 98}, },
			{{-1, REDUCE, 19}, {31, SHIFT, 97}, {32, SHIFT, 98}, },
			{{-1, REDUCE, 35}, {29, SHIFT, 89}, {30, SHIFT, 90}, },
			{{-1, REDUCE, 40}, {29, SHIFT, 89}, {30, SHIFT, 90}, },
			{{-1, REDUCE, 41}, {29, SHIFT, 89}, {30, SHIFT, 90}, },
			{{-1, REDUCE, 39}, {29, SHIFT, 89}, {30, SHIFT, 90}, },
			{{-1, REDUCE, 38}, {29, SHIFT, 89}, {30, SHIFT, 90}, },
			{{-1, REDUCE, 36}, {29, SHIFT, 89}, {30, SHIFT, 90}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 30}, {49, SHIFT, 101}, },
			{{-1, REDUCE, 31}, {49, SHIFT, 101}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 135}, {10, SHIFT, 34}, {11, SHIFT, 35}, {12, SHIFT, 36}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 75}, {16, SHIFT, 145}, {19, SHIFT, 135}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 139}, {38, SHIFT, 149}, },
			{{-1, ERROR, 140}, {11, SHIFT, 150}, },
			{{-1, ERROR, 141}, {11, SHIFT, 152}, },
			{{-1, ERROR, 142}, {29, SHIFT, 89}, {30, SHIFT, 90}, {38, SHIFT, 114}, },
			{{-1, ERROR, 143}, {4, SHIFT, 16}, {5, SHIFT, 17}, {13, SHIFT, 18}, {14, SHIFT, 154}, {16, SHIFT, 155}, {17, SHIFT, 19}, {20, SHIFT, 20}, {23, SHIFT, 21}, {25, SHIFT, 22}, {53, SHIFT, 23}, },
			{{-1, ERROR, 144}, {35, SHIFT, 156}, },
			{{-1, ERROR, 145}, {35, SHIFT, 157}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 147}, {18, SHIFT, 158}, },
			{{-1, ERROR, 148}, {4, SHIFT, 16}, {5, SHIFT, 17}, {13, SHIFT, 18}, {17, SHIFT, 19}, {20, SHIFT, 20}, {22, SHIFT, 159}, {23, SHIFT, 21}, {25, SHIFT, 22}, {53, SHIFT, 23}, },
			{{-1, ERROR, 149}, {36, SHIFT, 160}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 151}, {21, SHIFT, 161}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 153}, {24, SHIFT, 162}, },
			{{-1, ERROR, 154}, {36, SHIFT, 163}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 158}, {36, SHIFT, 168}, },
			{{-1, ERROR, 159}, {36, SHIFT, 169}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 162}, {11, SHIFT, 150}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 65}, {4, SHIFT, 16}, {5, SHIFT, 17}, {13, SHIFT, 18}, {17, SHIFT, 19}, {20, SHIFT, 20}, {23, SHIFT, 21}, {25, SHIFT, 22}, {53, SHIFT, 23}, },
			{{-1, ERROR, 165}, {14, SHIFT, 172}, },
			{{-1, REDUCE, 73}, {4, SHIFT, 16}, {5, SHIFT, 17}, {13, SHIFT, 18}, {17, SHIFT, 19}, {20, SHIFT, 20}, {23, SHIFT, 21}, {25, SHIFT, 22}, {53, SHIFT, 23}, },
			{{-1, REDUCE, 74}, {4, SHIFT, 16}, {5, SHIFT, 17}, {13, SHIFT, 18}, {17, SHIFT, 19}, {20, SHIFT, 20}, {23, SHIFT, 21}, {25, SHIFT, 22}, {53, SHIFT, 23}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 170}, {4, SHIFT, 16}, {5, SHIFT, 17}, {13, SHIFT, 18}, {17, SHIFT, 19}, {20, SHIFT, 20}, {23, SHIFT, 21}, {25, SHIFT, 22}, {26, SHIFT, 173}, {53, SHIFT, 23}, },
			{{-1, ERROR, 171}, {21, SHIFT, 174}, },
			{{-1, ERROR, 172}, {36, SHIFT, 175}, },
			{{-1, ERROR, 173}, {36, SHIFT, 176}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 177}, {4, SHIFT, 16}, {5, SHIFT, 17}, {13, SHIFT, 18}, {17, SHIFT, 19}, {20, SHIFT, 20}, {23, SHIFT, 21}, {25, SHIFT, 22}, {26, SHIFT, 178}, {53, SHIFT, 23}, },
			{{-1, ERROR, 178}, {36, SHIFT, 179}, },
			{{-1, REDUCE, 70}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 5}, },
			{{-1, 10}, },
			{{-1, 38}, },
			{{-1, 24}, {14, 39}, {22, 46}, {38, 50}, {40, 53}, {81, 110}, },
			{{-1, 11}, },
			{{-1, 37}, {135, 144}, },
			{{-1, 60}, {43, 73}, {48, 78}, {87, 116}, },
			{{-1, 71}, {41, 61}, {43, 61}, {48, 61}, {57, 84}, {87, 61}, {91, 122}, {92, 123}, {93, 124}, {94, 125}, {95, 126}, {96, 127}, {119, 142}, },
			{{-1, 62}, {89, 120}, {90, 121}, },
			{{-1, 63}, {97, 128}, {98, 129}, },
			{{-1, 64}, {42, 72}, {44, 74}, {57, 85}, {58, 86}, {106, 139}, },
			{{-1, 65}, },
			{{-1, 66}, {99, 130}, {100, 131}, },
			{{-1, 67}, {101, 132}, },
			{{-1, 68}, },
			{{-1, 69}, },
			{{-1, 12}, {21, 45}, {134, 143}, {138, 148}, {155, 164}, {156, 166}, {157, 167}, {161, 170}, {174, 177}, },
			{{-1, 25}, },
			{{-1, 54}, {81, 111}, },
			{{-1, 26}, },
			{{-1, 70}, {87, 117}, },
			{{-1, 27}, },
			{{-1, 28}, },
			{{-1, 165}, },
			{{-1, 29}, },
			{{-1, 30}, },
			{{-1, 31}, },
			{{-1, 151}, {162, 171}, },
			{{-1, 32}, },
			{{-1, 153}, },
			{{-1, 33}, },
			{{-1, 136}, {137, 146}, },
			{{-1, 147}, },
			{{-1, 137}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: identificador",
			"expecting: EOF",
			"expecting: 'inicio'",
			"expecting: 'fim.', 'leia', 'escreva', 'const', 'inteiro', 'real', 'caractere', 'se', 'avalie', 'enquanto', 'repita', 'para', identificador",
			"expecting: ':'",
			"expecting: 'fim.', 'leia', 'escreva', 'se', 'avalie', 'enquanto', 'repita', 'para', identificador",
			"expecting: string, n int, n real",
			"expecting: '('",
			"expecting: 'leia', 'escreva', 'se', 'avalie', 'enquanto', 'repita', 'ate', 'para', identificador",
			"expecting: 'de', '<-', ',', ';', ')', '['",
			"expecting: '<-'",
			"expecting: 'fim.', 'leia', 'escreva', 'se', 'fim se', 'senao', 'avalie', 'fim avalie', 'caso', 'enquanto', 'fim enquanto', 'repita', 'ate', 'para', 'fim para', identificador",
			"expecting: ':', ';'",
			"expecting: ';'",
			"expecting: ',', ';'",
			"expecting: string, n int, '(', 'nao', identificador",
			"expecting: 'de'",
			"expecting: n int",
			"expecting: ',', ')'",
			"expecting: ')'",
			"expecting: '+', '-', '*', '/', ',', ';', ')', '=', '>', '<', '>=', '<=', '<>', 'e', 'ou', 'xor'",
			"expecting: '+', '-', ',', ';', ')', '=', '>', '<', '>=', '<=', '<>'",
			"expecting: ',', ';', ')'",
			"expecting: ',', ';', ')', 'ou', 'xor'",
			"expecting: ',', ';', ')', 'e', 'ou', 'xor'",
			"expecting: '+', '-', '=', '>', '<', '>=', '<=', '<>'",
			"expecting: ']'",
			"expecting: ')', identificador",
			"expecting: '+', '-', ')', '=', '>', '<', '>=', '<=', '<>'",
			"expecting: string, n int, '(', ')', 'nao', identificador",
			"expecting: string, n int, '(', identificador",
			"expecting: 'entao'",
			"expecting: 'caso'",
			"expecting: 'faca'",
			"expecting: 'ate', 'passo'",
			"expecting: 'de', '<-', ',', ';', ')'",
			"expecting: ','",
			"expecting: '+', '-', ',', ';', ')', 'e', 'ou', 'xor'",
			"expecting: 'leia', 'escreva', 'se', 'fim se', 'senao', 'avalie', 'enquanto', 'repita', 'para', identificador",
			"expecting: 'senao', 'fim avalie', 'caso'",
			"expecting: 'leia', 'escreva', 'se', 'avalie', 'enquanto', 'fim enquanto', 'repita', 'para', identificador",
			"expecting: '+', '-', ')'",
			"expecting: 'fim avalie'",
			"expecting: 'ate'",
			"expecting: 'leia', 'escreva', 'se', 'fim se', 'avalie', 'enquanto', 'repita', 'para', identificador",
			"expecting: 'leia', 'escreva', 'se', 'senao', 'avalie', 'fim avalie', 'caso', 'enquanto', 'repita', 'para', identificador",
			"expecting: 'leia', 'escreva', 'se', 'avalie', 'fim avalie', 'enquanto', 'repita', 'para', identificador",
			"expecting: 'leia', 'escreva', 'se', 'avalie', 'enquanto', 'repita', 'para', 'fim para', identificador",
			"expecting: 'fim se'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 4, 1, 5, 5, 5, 4, 5, 6, 7, 1, 2, 8, 8, 8, 8, 8, 9, 1, 10, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 14, 1, 15, 1, 16, 16, 16, 16, 9, 17, 18, 16, 4, 15, 1, 4, 19, 20, 21, 21, 16, 16, 21, 19, 22, 21, 21, 23, 24, 25, 25, 25, 25, 20, 26, 20, 20, 20, 8, 18, 27, 14, 1, 4, 28, 14, 14, 29, 20, 23, 30, 14, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 14, 32, 33, 34, 16, 35, 36, 12, 37, 20, 12, 12, 21, 25, 37, 20, 12, 31, 21, 21, 38, 38, 38, 38, 38, 38, 21, 21, 25, 25, 25, 12, 39, 7, 40, 40, 41, 20, 18, 18, 42, 39, 5, 5, 40, 43, 41, 14, 34, 34, 44, 44, 14, 45, 46, 47, 14, 14, 12, 48, 18, 12, 45, 49, 46, 47, 12, 12, 48, 34, 14, 14, 48, 12, 12, 48, 14, 12, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

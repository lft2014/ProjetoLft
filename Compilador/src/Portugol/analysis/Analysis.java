/* This file was generated by SableCC (http://www.sablecc.org/). */

package Portugol.analysis;

import Portugol.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAAstPrograma(AAstPrograma node);
    void caseADclAstDeclaracoes(ADclAstDeclaracoes node);
    void caseAVazioAstDeclaracoes(AVazioAstDeclaracoes node);
    void caseAMultiplasAstDeclconj(AMultiplasAstDeclconj node);
    void caseASimplesAstDeclconj(ASimplesAstDeclconj node);
    void caseAConstAstDeclconj(AConstAstDeclconj node);
    void caseAIdAstVarDef(AIdAstVarDef node);
    void caseAVetorAstVarDef(AVetorAstVarDef node);
    void caseAMultiplasAstDclVarLista(AMultiplasAstDclVarLista node);
    void caseASimplesAstDclVarLista(ASimplesAstDclVarLista node);
    void caseAIntAstTipo(AIntAstTipo node);
    void caseARealAstTipo(ARealAstTipo node);
    void caseACAstTipo(ACAstTipo node);
    void caseAIntAstValor(AIntAstValor node);
    void caseANrealAstValor(ANrealAstValor node);
    void caseAStrAstValor(AStrAstValor node);
    void caseAExparitmeticaExpGeral(AExparitmeticaExpGeral node);
    void caseAExpLExpGeral(AExpLExpGeral node);
    void caseAMaisExp(AMaisExp node);
    void caseAMenosExp(AMenosExp node);
    void caseAMultiplicacaoExp(AMultiplicacaoExp node);
    void caseADivisaoExp(ADivisaoExp node);
    void caseANumerointExp(ANumerointExp node);
    void caseAIdExp(AIdExp node);
    void caseAExpExp(AExpExp node);
    void caseAStrExp(AStrExp node);
    void caseANlogExpLogica(ANlogExpLogica node);
    void caseAOubinExpLogica(AOubinExpLogica node);
    void caseAXorbinExpLogica(AXorbinExpLogica node);
    void caseAEbinExpLogica(AEbinExpLogica node);
    void caseAIgualExpLogica(AIgualExpLogica node);
    void caseADiferenteExpLogica(ADiferenteExpLogica node);
    void caseAMaiorExpLogica(AMaiorExpLogica node);
    void caseAMaiorIgualExpLogica(AMaiorIgualExpLogica node);
    void caseAMenorExpLogica(AMenorExpLogica node);
    void caseAMenorIgualExpLogica(AMenorIgualExpLogica node);
    void caseALeiaConjComandos(ALeiaConjComandos node);
    void caseAEscrevaConjComandos(AEscrevaConjComandos node);
    void caseAAtribuicaoConjComandos(AAtribuicaoConjComandos node);
    void caseACondicionalConjComandos(ACondicionalConjComandos node);
    void caseAEnquantoConjComandos(AEnquantoConjComandos node);
    void caseARepitaConjComandos(ARepitaConjComandos node);
    void caseAFacaConjComandos(AFacaConjComandos node);
    void caseAFacaPassoConjComandos(AFacaPassoConjComandos node);
    void caseAAvalieConjComandos(AAvalieConjComandos node);
    void caseAVazioConjComandos(AVazioConjComandos node);
    void caseASimplesAstLeia(ASimplesAstLeia node);
    void caseACompostaAstLeia(ACompostaAstLeia node);
    void caseAAstAtribuicao(AAstAtribuicao node);
    void caseASimplesAstEscreva(ASimplesAstEscreva node);
    void caseACompostaAstEscreva(ACompostaAstEscreva node);
    void caseASimplesAstComandoSe(ASimplesAstComandoSe node);
    void caseACompletoAstComandoSe(ACompletoAstComandoSe node);
    void caseAEnquantoAstComandoEnquanto(AEnquantoAstComandoEnquanto node);
    void caseARepitaAstComandoRepita(ARepitaAstComandoRepita node);
    void caseAParaAstComandoPara(AParaAstComandoPara node);
    void caseAAstComplemento1(AAstComplemento1 node);
    void caseAAstParaPasso(AAstParaPasso node);
    void caseAAstComplemento2(AAstComplemento2 node);
    void caseAAstAvalie(AAstAvalie node);
    void caseAAstCaso(AAstCaso node);
    void caseASenaoAstSenaoAvalie(ASenaoAstSenaoAvalie node);
    void caseAVazioAstSenaoAvalie(AVazioAstSenaoAvalie node);
    void caseASimplesAstVarvirgula(ASimplesAstVarvirgula node);
    void caseACompostaAstVarvirgula(ACompostaAstVarvirgula node);
    void caseASimplesAstExpvirgula(ASimplesAstExpvirgula node);
    void caseACompostaAstExpvirgula(ACompostaAstExpvirgula node);

    void caseTFim(TFim node);
    void caseTVar(TVar node);
    void caseTInicio(TInicio node);
    void caseTPrograma(TPrograma node);
    void caseTLeia(TLeia node);
    void caseTEscreva(TEscreva node);
    void caseTConst(TConst node);
    void caseTInteiro(TInteiro node);
    void caseTReal(TReal node);
    void caseTCaractere(TCaractere node);
    void caseTString(TString node);
    void caseTNInt(TNInt node);
    void caseTNReal(TNReal node);
    void caseTSe(TSe node);
    void caseTFimSe(TFimSe node);
    void caseTEntao(TEntao node);
    void caseTSenao(TSenao node);
    void caseTAvalie(TAvalie node);
    void caseTFimAvalie(TFimAvalie node);
    void caseTCaso(TCaso node);
    void caseTEnquanto(TEnquanto node);
    void caseTFaca(TFaca node);
    void caseTFimEnquanto(TFimEnquanto node);
    void caseTRepita(TRepita node);
    void caseTAte(TAte node);
    void caseTPara(TPara node);
    void caseTFimPara(TFimPara node);
    void caseTDe(TDe node);
    void caseTPasso(TPasso node);
    void caseTMais(TMais node);
    void caseTMenos(TMenos node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTVirgula(TVirgula node);
    void caseTDoispontos(TDoispontos node);
    void caseTPontoevirgula(TPontoevirgula node);
    void caseTEsqParen(TEsqParen node);
    void caseTDirParen(TDirParen node);
    void caseTAspaD(TAspaD node);
    void caseTAspaS(TAspaS node);
    void caseTEsqColchete(TEsqColchete node);
    void caseTDirColchete(TDirColchete node);
    void caseTIgual(TIgual node);
    void caseTMaior(TMaior node);
    void caseTMenor(TMenor node);
    void caseTMaiorigual(TMaiorigual node);
    void caseTMenorigual(TMenorigual node);
    void caseTDiferente(TDiferente node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTXor(TXor node);
    void caseTNao(TNao node);
    void caseTIdentificador(TIdentificador node);
    void caseTBlanks(TBlanks node);
    void caseTNumero(TNumero node);
    void caseTComment(TComment node);
    void caseTCommentError(TCommentError node);
    void caseTCommentEnd(TCommentEnd node);
    void caseTCommentBody(TCommentBody node);
    void caseTStar(TStar node);
    void caseTSlash(TSlash node);
    void caseTComentarioSimples(TComentarioSimples node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}

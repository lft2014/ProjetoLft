/* This file was generated by SableCC (http://www.sablecc.org/). */

package Portugol.node;

import Portugol.analysis.*;

@SuppressWarnings("nls")
public final class AConstAstDeclconj extends PAstDeclconj
{
    private TIdentificador _identificador_;
    private PAstValor _astValor_;

    public AConstAstDeclconj()
    {
        // Constructor
    }

    public AConstAstDeclconj(
        @SuppressWarnings("hiding") TIdentificador _identificador_,
        @SuppressWarnings("hiding") PAstValor _astValor_)
    {
        // Constructor
        setIdentificador(_identificador_);

        setAstValor(_astValor_);

    }

    @Override
    public Object clone()
    {
        return new AConstAstDeclconj(
            cloneNode(this._identificador_),
            cloneNode(this._astValor_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConstAstDeclconj(this);
    }

    public TIdentificador getIdentificador()
    {
        return this._identificador_;
    }

    public void setIdentificador(TIdentificador node)
    {
        if(this._identificador_ != null)
        {
            this._identificador_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identificador_ = node;
    }

    public PAstValor getAstValor()
    {
        return this._astValor_;
    }

    public void setAstValor(PAstValor node)
    {
        if(this._astValor_ != null)
        {
            this._astValor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._astValor_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identificador_)
            + toString(this._astValor_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identificador_ == child)
        {
            this._identificador_ = null;
            return;
        }

        if(this._astValor_ == child)
        {
            this._astValor_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identificador_ == oldChild)
        {
            setIdentificador((TIdentificador) newChild);
            return;
        }

        if(this._astValor_ == oldChild)
        {
            setAstValor((PAstValor) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
